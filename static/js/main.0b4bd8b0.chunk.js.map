{"version":3,"sources":["App.js","components/block.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","edit","bind","assertThisInitialized","save","remove","rendDefault","rendEdit","setState","updateBlock","refs","textar","value","index","deleteBlock","react_default","a","createElement","className","children","onClick","ref","defaultValue","React","Component","Block","tasks","addBlock","mapTasks","text","arr","push","i","splice","item","src_App","key","map","Boolean","window","location","hostname","match","root","document","getElementById","ReactDOM","render","block","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b4bd8b0.chunk.js","sourcesContent":["import React from 'react';\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            edit: false\n        };\n\n        this.edit = this.edit.bind(this);\n        this.save = this.save.bind(this);\n        this.remove = this.remove.bind(this);\n        this.rendDefault = this.rendDefault.bind(this);\n        this.rendEdit = this.rendEdit.bind(this);\n\n    }\n\n    edit(){\n        this.setState({edit: true})\n    }\n\n    save(){\n        this.props.updateBlock(this.refs.textar.value, this.props.index);\n        this.setState({edit: false})\n    }\n\n    remove(){\n        this.props.deleteBlock (this.props.index);\n    }\n\n    rendDefault(){\n        return(\n                <div className=\"box\">\n                    <div>{this.props.children}</div>\n                    <button onClick={this.edit} className=\"btn light\">Редактировать</button>\n                    <button onClick={this.remove} className=\"btn red\">Удалить</button>\n                </div>\n        );\n    }\n\n    rendEdit(){\n        return(\n                <div className=\"box\">\n                    <textarea ref=\"textar\" defaultValue={this.props.children}></textarea>\n                    <button onClick={this.save} className=\"btn green\">Сохранить</button>\n                </div>\n        );\n    }\n\n    render(){\n        if(this.state.edit){\n           return this.rendEdit ();\n        } else {\n            return this.rendDefault();\n        }\n\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport App from '../App';\n\nclass Block extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            tasks: []\n        };\n\n        this.addBlock = this.addBlock.bind(this);\n        this.deleteBlock = this.deleteBlock.bind(this);\n        this.updateBlock = this.updateBlock.bind(this);\n        this.mapTasks = this.mapTasks.bind(this);\n    }\n\n    addBlock (text){\n        let arr = this.state.tasks;\n        arr.push (text);\n        this.setState({tasks: arr});\n    }\n\n    deleteBlock (i){\n        let arr = this.state.tasks;\n        arr.splice(i, 1);\n        this.setState({tasks: arr});\n    }\n\n    updateBlock (text, i){\n        let arr = this.state.tasks;\n        arr[i] = text;\n        this.setState({tasks: arr});\n    }\n\n\n    mapTasks (item, i) {\n        return (\n            <App key={i} index={i} updateBlock={this.updateBlock} deleteBlock={this.deleteBlock}>\n                {item}\n            </App>\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"field\">\n                <button onClick={this.addBlock.bind(null, 'Новая задача')} className=\"btn new\">Новая задача</button>\n                {this.state.tasks.map(this.mapTasks)}\n            </div>\n        );\n    }\n}\n\nexport default Block;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Block from './components/block';\nimport './App.css'\nimport * as serviceWorker from './serviceWorker';\n\nconst root = document.getElementById('root');\nReactDOM.render(<Block/>, root);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}